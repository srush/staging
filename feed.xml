<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://iclr-blogposts.github.io/staging/feed.xml" rel="self" type="application/atom+xml"/><link href="https://iclr-blogposts.github.io/staging/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-04-29T14:48:53+00:00</updated><id>https://iclr-blogposts.github.io/staging/feed.xml</id><title type="html">ICLR Blogposts 2023 (staging)</title><subtitle>Staging website for the 2023 ICLR Blogposts track </subtitle><entry><title type="html">Sample Blog Post</title><link href="https://iclr-blogposts.github.io/staging/blog/2022/distill-example/" rel="alternate" type="text/html" title="Sample Blog Post"/><published>2022-12-01T00:00:00+00:00</published><updated>2022-12-01T00:00:00+00:00</updated><id>https://iclr-blogposts.github.io/staging/blog/2022/distill-example</id><content type="html" xml:base="https://iclr-blogposts.github.io/staging/blog/2022/distill-example/"><![CDATA[<h2 id="equations">Equations</h2> <p>This theme supports rendering beautiful math in inline and display modes using <a href="https://www.mathjax.org/">MathJax 3</a> engine. You just need to surround your math expression with <code class="language-plaintext highlighter-rouge">$$</code>, like <code class="language-plaintext highlighter-rouge">$$ E = mc^2 $$</code>. If you leave it inside a paragraph, it will produce an inline expression, just like \(E = mc^2\).</p> <p>To use display mode, again surround your expression with <code class="language-plaintext highlighter-rouge">$$</code> and place it as a separate paragraph. Here is an example:</p> \[\left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right)\] <p>Note that MathJax 3 is <a href="https://docs.mathjax.org/en/latest/upgrading/whats-new-3.0.html">a major re-write of MathJax</a> that brought a significant improvement to the loading and rendering speed, which is now <a href="http://www.intmath.com/cg5/katex-mathjax-comparison.php">on par with KaTeX</a>.</p> <h2 id="images-and-figures">Images and Figures</h2> <p>Its generally a better idea to avoid linking to images hosted elsewhere - links can break and you might face losing important information in your blog post. To include images in your submission in this way, you must do something like the following:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{% include figure.html path="assets/img/2022-12-01-distill-example/iclr.png" class="img-fluid" %}
</code></pre></div></div> <p>which results in the following image:</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/staging/assets/img/2022-12-01-distill-example/iclr-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/staging/assets/img/2022-12-01-distill-example/iclr-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/staging/assets/img/2022-12-01-distill-example/iclr-1400.webp"/> <img src="/staging/assets/img/2022-12-01-distill-example/iclr.png" class="img-fluid" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>To ensure that there are no namespace conflicts, you must save your asset to your unique directory <code class="language-plaintext highlighter-rouge">/assets/img/2023-05-01-[SUBMISSION NAME]</code> within your submission.</p> <p>Please avoid using the direct markdown method of embedding images; they may not be properly resized. Some more complex ways to load images (note the different styles of the shapes/shadows):</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/staging/assets/img/2022-12-01-distill-example/9-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/staging/assets/img/2022-12-01-distill-example/9-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/staging/assets/img/2022-12-01-distill-example/9-1400.webp"/> <img src="/staging/assets/img/2022-12-01-distill-example/9.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/staging/assets/img/2022-12-01-distill-example/7-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/staging/assets/img/2022-12-01-distill-example/7-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/staging/assets/img/2022-12-01-distill-example/7-1400.webp"/> <img src="/staging/assets/img/2022-12-01-distill-example/7.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> A simple, elegant caption looks good between image rows, after each row, or doesn't have to be there at all. </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/staging/assets/img/2022-12-01-distill-example/8-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/staging/assets/img/2022-12-01-distill-example/8-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/staging/assets/img/2022-12-01-distill-example/8-1400.webp"/> <img src="/staging/assets/img/2022-12-01-distill-example/8.jpg" class="img-fluid z-depth-2" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/staging/assets/img/2022-12-01-distill-example/10-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/staging/assets/img/2022-12-01-distill-example/10-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/staging/assets/img/2022-12-01-distill-example/10-1400.webp"/> <img src="/staging/assets/img/2022-12-01-distill-example/10.jpg" class="img-fluid z-depth-2" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/staging/assets/img/2022-12-01-distill-example/11-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/staging/assets/img/2022-12-01-distill-example/11-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/staging/assets/img/2022-12-01-distill-example/11-1400.webp"/> <img src="/staging/assets/img/2022-12-01-distill-example/11.jpg" class="img-fluid" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/staging/assets/img/2022-12-01-distill-example/12-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/staging/assets/img/2022-12-01-distill-example/12-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/staging/assets/img/2022-12-01-distill-example/12-1400.webp"/> <img src="/staging/assets/img/2022-12-01-distill-example/12.jpg" class="img-fluid" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/staging/assets/img/2022-12-01-distill-example/7-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/staging/assets/img/2022-12-01-distill-example/7-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/staging/assets/img/2022-12-01-distill-example/7-1400.webp"/> <img src="/staging/assets/img/2022-12-01-distill-example/7.jpg" class="img-fluid" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h3 id="interactive-figures">Interactive Figures</h3> <p>Here’s how you could embed interactive figures that have been exported as HTML files. Note that we will be using plotly for this demo, but anything built off of HTML should work (<strong>no extra javascript is allowed!</strong>). All that’s required is for you to export your figure into HTML format, and make sure that the file exists in the <code class="language-plaintext highlighter-rouge">assets/html/[SUBMISSION NAME]/</code> directory in this repository’s root directory. To embed it into any page, simply insert the following code anywhere into your page.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{% include [FIGURE_NAME].html %} 
</code></pre></div></div> <p>For example, the following code can be used to generate the figure underneath it.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="n">plotly.express</span> <span class="k">as</span> <span class="n">px</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="s">'https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv'</span><span class="p">)</span>

<span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="p">.</span><span class="nf">density_mapbox</span><span class="p">(</span>
    <span class="n">df</span><span class="p">,</span> <span class="n">lat</span><span class="o">=</span><span class="s">'Latitude'</span><span class="p">,</span> <span class="n">lon</span><span class="o">=</span><span class="s">'Longitude'</span><span class="p">,</span> <span class="n">z</span><span class="o">=</span><span class="s">'Magnitude'</span><span class="p">,</span> <span class="n">radius</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>
    <span class="n">center</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">lat</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">lon</span><span class="o">=</span><span class="mi">180</span><span class="p">),</span> <span class="n">zoom</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">mapbox_style</span><span class="o">=</span><span class="s">"stamen-terrain"</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>

<span class="n">fig</span><span class="p">.</span><span class="nf">write_html</span><span class="p">(</span><span class="s">'./assets/html/2022-12-01-distill-example/plotly_demo_1.html'</span><span class="p">)</span>
</code></pre></div></div> <p>And then include it with the following:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"l-page"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;iframe</span> <span class="na">src=</span><span class="s">"{{ 'assets/html/2022-12-01-distill-example/plotly_demo_1.html' | relative_url }}"</span> <span class="na">frameborder=</span><span class="s">'0'</span> <span class="na">scrolling=</span><span class="s">'no'</span> <span class="na">height=</span><span class="s">"600px"</span> <span class="na">width=</span><span class="s">"100%"</span><span class="nt">&gt;&lt;/iframe&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div> <p>Voila!</p> <div class="l-page"> <iframe src="/staging/assets/html/2022-12-01-distill-example/plotly_demo_1.html" frameborder="0" scrolling="no" height="600px" width="100%"></iframe> </div> <h2 id="citations">Citations</h2> <p>Citations are then used in the article body with the <code class="language-plaintext highlighter-rouge">&lt;d-cite&gt;</code> tag. The key attribute is a reference to the id provided in the bibliography. The key attribute can take multiple ids, separated by commas.</p> <p>The citation is presented inline like this: <d-cite key="gregor2015draw"></d-cite> (a number that displays more information on hover). If you have an appendix, a bibliography is automatically created and populated in it.</p> <p>Distill chose a numerical inline citation style to improve readability of citation dense articles and because many of the benefits of longer citations are obviated by displaying more information on hover. However, we consider it good style to mention author last names if you discuss something at length and it fits into the flow well — the authors are human and it’s nice for them to have the community associate them with their work.</p> <hr/> <h2 id="footnotes">Footnotes</h2> <p>Just wrap the text you would like to show up in a footnote in a <code class="language-plaintext highlighter-rouge">&lt;d-footnote&gt;</code> tag. The number of the footnote will be automatically generated.<d-footnote>This will become a hoverable footnote.</d-footnote></p> <hr/> <h2 id="code-blocks">Code Blocks</h2> <p>This theme implements a built-in Jekyll feature, the use of Rouge, for syntax highlighting. It supports more than 100 languages. This example is in C++. All you have to do is wrap your code in a liquid tag:</p> <p>{% highlight c++ linenos %} <br/> code code code <br/> {% endhighlight %}</p> <p>The keyword <code class="language-plaintext highlighter-rouge">linenos</code> triggers display of line numbers. You can try toggling it on or off yourself below:</p> <figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="err">\</span><span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
<span class="n">string</span> <span class="n">myString</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"input a string: "</span><span class="p">;</span>
    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">myString</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>

    <span class="kt">char</span> <span class="n">charArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">[</span><span class="n">length</span><span class="p">];</span>

    <span class="n">charArray</span> <span class="o">=</span> <span class="n">myString</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">charArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure> <hr/> <h2 id="diagrams">Diagrams</h2> <p>This theme supports generating various diagrams from a text description using <a href="https://github.com/zhustec/jekyll-diagrams" target="\_blank">jekyll-diagrams</a> plugin. Below, we generate a few examples of such diagrams using languages such as <a href="https://mermaid-js.github.io/mermaid/" target="\_blank">mermaid</a>, <a href="https://plantuml.com/" target="\_blank">plantuml</a>, <a href="https://vega.github.io/vega-lite/" target="\_blank">vega-lite</a>, etc.</p> <p><strong>Note:</strong> different diagram-generation packages require external dependencies to be installed on your machine. Also, be mindful of that because of diagram generation the fist time you build your Jekyll website after adding new diagrams will be SLOW. For any other details, please refer to <a href="https://github.com/zhustec/jekyll-diagrams" target="\_blank">jekyll-diagrams</a> README.</p> <p><strong>Note:</strong> This is not supported for local rendering!</p> <p>The diagram below was generated by the following code:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{% mermaid %}
sequenceDiagram
    participant John
    participant Alice
    Alice-&gt;&gt;John: Hello John, how are you?
    John--&gt;&gt;Alice: Great!
{% endmermaid %}
</code></pre></div></div> <div class="jekyll-diagrams diagrams mermaid"> <svg id="mermaid-1682779739458" width="100%" xmlns="http://www.w3.org/2000/svg" height="100%" style="max-width:450px;" viewBox="-50 -10 450 231"><style>#mermaid-1682779739458 .label{font-family:trebuchet ms,verdana,arial;color:#333}#mermaid-1682779739458 .node circle,#mermaid-1682779739458 .node ellipse,#mermaid-1682779739458 .node polygon,#mermaid-1682779739458 .node rect{fill:#ececff;stroke:#9370db;stroke-width:1px}#mermaid-1682779739458 .node.clickable{cursor:pointer}#mermaid-1682779739458 .arrowheadPath{fill:#333}#mermaid-1682779739458 .edgePath .path{stroke:#333;stroke-width:1.5px}#mermaid-1682779739458 .edgeLabel{background-color:#e8e8e8}#mermaid-1682779739458 .cluster rect{fill:#ffffde!important;stroke:#aa3!important;stroke-width:1px!important}#mermaid-1682779739458 .cluster text{fill:#333}#mermaid-1682779739458 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:trebuchet ms,verdana,arial;font-size:12px;background:#ffffde;border:1px solid #aa3;border-radius:2px;pointer-events:none;z-index:100}#mermaid-1682779739458 .actor{stroke:#ccf;fill:#ececff}#mermaid-1682779739458 text.actor{fill:#000;stroke:none}#mermaid-1682779739458 .actor-line{stroke:grey}#mermaid-1682779739458 .messageLine0{marker-end:"url(#arrowhead)"}#mermaid-1682779739458 .messageLine0,#mermaid-1682779739458 .messageLine1{stroke-width:1.5;stroke-dasharray:"2 2";stroke:#333}#mermaid-1682779739458 #arrowhead{fill:#333}#mermaid-1682779739458 #crosshead path{fill:#333!important;stroke:#333!important}#mermaid-1682779739458 .messageText{fill:#333;stroke:none}#mermaid-1682779739458 .labelBox{stroke:#ccf;fill:#ececff}#mermaid-1682779739458 .labelText,#mermaid-1682779739458 .loopText{fill:#000;stroke:none}#mermaid-1682779739458 .loopLine{stroke-width:2;stroke-dasharray:"2 2";marker-end:"url(#arrowhead)";stroke:#ccf}#mermaid-1682779739458 .note{stroke:#aa3;fill:#fff5ad}#mermaid-1682779739458 .noteText{fill:#000;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:14px}#mermaid-1682779739458 .section{stroke:none;opacity:.2}#mermaid-1682779739458 .section0{fill:rgba(102,102,255,.49)}#mermaid-1682779739458 .section2{fill:#fff400}#mermaid-1682779739458 .section1,#mermaid-1682779739458 .section3{fill:#fff;opacity:.2}#mermaid-1682779739458 .sectionTitle0,#mermaid-1682779739458 .sectionTitle1,#mermaid-1682779739458 .sectionTitle2,#mermaid-1682779739458 .sectionTitle3{fill:#333}#mermaid-1682779739458 .sectionTitle{text-anchor:start;font-size:11px;text-height:14px}#mermaid-1682779739458 .grid .tick{stroke:#d3d3d3;opacity:.3;shape-rendering:crispEdges}#mermaid-1682779739458 .grid path{stroke-width:0}#mermaid-1682779739458 .today{fill:none;stroke:red;stroke-width:2px}#mermaid-1682779739458 .task{stroke-width:2}#mermaid-1682779739458 .taskText{text-anchor:middle;font-size:11px}#mermaid-1682779739458 .taskTextOutsideRight{fill:#000;text-anchor:start;font-size:11px}#mermaid-1682779739458 .taskTextOutsideLeft{fill:#000;text-anchor:end;font-size:11px}#mermaid-1682779739458 .taskText0,#mermaid-1682779739458 .taskText1,#mermaid-1682779739458 .taskText2,#mermaid-1682779739458 .taskText3{fill:#fff}#mermaid-1682779739458 .task0,#mermaid-1682779739458 .task1,#mermaid-1682779739458 .task2,#mermaid-1682779739458 .task3{fill:#8a90dd;stroke:#534fbc}#mermaid-1682779739458 .taskTextOutside0,#mermaid-1682779739458 .taskTextOutside1,#mermaid-1682779739458 .taskTextOutside2,#mermaid-1682779739458 .taskTextOutside3{fill:#000}#mermaid-1682779739458 .active0,#mermaid-1682779739458 .active1,#mermaid-1682779739458 .active2,#mermaid-1682779739458 .active3{fill:#bfc7ff;stroke:#534fbc}#mermaid-1682779739458 .activeText0,#mermaid-1682779739458 .activeText1,#mermaid-1682779739458 .activeText2,#mermaid-1682779739458 .activeText3{fill:#000!important}#mermaid-1682779739458 .done0,#mermaid-1682779739458 .done1,#mermaid-1682779739458 .done2,#mermaid-1682779739458 .done3{stroke:grey;fill:#d3d3d3;stroke-width:2}#mermaid-1682779739458 .doneText0,#mermaid-1682779739458 .doneText1,#mermaid-1682779739458 .doneText2,#mermaid-1682779739458 .doneText3{fill:#000!important}#mermaid-1682779739458 .crit0,#mermaid-1682779739458 .crit1,#mermaid-1682779739458 .crit2,#mermaid-1682779739458 .crit3{stroke:#f88;fill:red;stroke-width:2}#mermaid-1682779739458 .activeCrit0,#mermaid-1682779739458 .activeCrit1,#mermaid-1682779739458 .activeCrit2,#mermaid-1682779739458 .activeCrit3{stroke:#f88;fill:#bfc7ff;stroke-width:2}#mermaid-1682779739458 .doneCrit0,#mermaid-1682779739458 .doneCrit1,#mermaid-1682779739458 .doneCrit2,#mermaid-1682779739458 .doneCrit3{stroke:#f88;fill:#d3d3d3;stroke-width:2;cursor:pointer;shape-rendering:crispEdges}#mermaid-1682779739458 .activeCritText0,#mermaid-1682779739458 .activeCritText1,#mermaid-1682779739458 .activeCritText2,#mermaid-1682779739458 .activeCritText3,#mermaid-1682779739458 .doneCritText0,#mermaid-1682779739458 .doneCritText1,#mermaid-1682779739458 .doneCritText2,#mermaid-1682779739458 .doneCritText3{fill:#000!important}#mermaid-1682779739458 .titleText{text-anchor:middle;font-size:18px;fill:#000}
#mermaid-1682779739458 g.classGroup text{fill:#9370db;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:10px}#mermaid-1682779739458 g.classGroup rect{fill:#ececff;stroke:#9370db}#mermaid-1682779739458 g.classGroup line{stroke:#9370db;stroke-width:1}#mermaid-1682779739458 .classLabel .box{stroke:none;stroke-width:0;fill:#ececff;opacity:.5}#mermaid-1682779739458 .classLabel .label{fill:#9370db;font-size:10px}#mermaid-1682779739458 .relation{stroke:#9370db;stroke-width:1;fill:none}#mermaid-1682779739458 #compositionEnd,#mermaid-1682779739458 #compositionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-1682779739458 #aggregationEnd,#mermaid-1682779739458 #aggregationStart{fill:#ececff;stroke:#9370db;stroke-width:1}#mermaid-1682779739458 #dependencyEnd,#mermaid-1682779739458 #dependencyStart,#mermaid-1682779739458 #extensionEnd,#mermaid-1682779739458 #extensionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-1682779739458 .branch-label,#mermaid-1682779739458 .commit-id,#mermaid-1682779739458 .commit-msg{fill:#d3d3d3;color:#d3d3d3}</style><style>#mermaid-1682779739458{color:#000;font:normal normal 400 normal 16px / normal "Times New Roman"}</style><g></g><g><line id="actor0" x1="75" y1="5" x2="75" y2="220" class="actor-line" stroke-width="0.5px" stroke="#999"></line><rect x="0" y="0" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="75" y="32.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="75" dy="0">John</tspan></text></g><g><line id="actor1" x1="275" y1="5" x2="275" y2="220" class="actor-line" stroke-width="0.5px" stroke="#999"></line><rect x="200" y="0" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="275" y="32.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="275" dy="0">Alice</tspan></text></g><defs><marker id="arrowhead" refX="5" refY="2" markerWidth="6" markerHeight="4" orient="auto"><path d="M 0,0 V 4 L6,2 Z"></path></marker></defs><defs><marker id="crosshead" markerWidth="15" markerHeight="8" orient="auto" refX="16" refY="4"><path fill="black" stroke="#000000" stroke-width="1px" d="M 9,2 V 6 L16,4 Z" style="stroke-dasharray: 0, 0;"></path><path fill="none" stroke="#000000" stroke-width="1px" d="M 0,1 L 6,7 M 6,1 L 0,7" style="stroke-dasharray: 0, 0;"></path></marker></defs><g><text x="175" y="93" class="messageText" style="text-anchor: middle;">Hello John, how are you?</text><line x1="275" y1="100" x2="75" y2="100" class="messageLine0" stroke-width="2" stroke="black" marker-end="url(#arrowhead)" style="fill: none;"></line></g><g><text x="175" y="128" class="messageText" style="text-anchor: middle;">Great!</text><line x1="75" y1="135" x2="275" y2="135" class="messageLine1" stroke-width="2" stroke="black" marker-end="url(#arrowhead)" style="stroke-dasharray: 3, 3; fill: none;"></line></g><g><rect x="0" y="155" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="75" y="187.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="75" dy="0">John</tspan></text></g><g><rect x="200" y="155" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="275" y="187.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="275" dy="0">Alice</tspan></text></g></svg> </div> <hr/> <h2 id="tweets">Tweets</h2> <p>An example of displaying a tweet:</p> <div class="jekyll-twitter-plugin"><blockquote class="twitter-tweet"><p lang="sv" dir="ltr">jekyll-twitter-plugin (1.0.0): A Liquid tag plugin for Jekyll that renders Tweets from Twitter API <a href="http://t.co/m4EIQPM9h4">http://t.co/m4EIQPM9h4</a></p>&mdash; RubyGems (@rubygems) <a href="https://twitter.com/rubygems/status/518821243320287232?ref_src=twsrc%5Etfw">October 5, 2014</a></blockquote> <script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> </div> <p>An example of pulling from a timeline:</p> <div class="jekyll-twitter-plugin"><a class="twitter-timeline" data-width="500" data-tweet-limit="3" href="https://twitter.com/jekyllrb?ref_src=twsrc%5Etfw">Tweets by jekyllrb</a> <script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> </div> <p>For more details on using the plugin visit: <a href="https://github.com/rob-murray/jekyll-twitter-plugin">jekyll-twitter-plugin</a></p> <hr/> <h2 id="blockquotes">Blockquotes</h2> <blockquote> We do not grow absolutely, chronologically. We grow sometimes in one dimension, and not in another, unevenly. We grow partially. We are relative. We are mature in one realm, childish in another. —Anais Nin </blockquote> <hr/> <h2 id="layouts">Layouts</h2> <p>The main text column is referred to as the body. It is the assumed layout of any direct descendants of the <code class="language-plaintext highlighter-rouge">d-article</code> element.</p> <div class="fake-img l-body"> <p>.l-body</p> </div> <p>For images you want to display a little larger, try <code class="language-plaintext highlighter-rouge">.l-page</code>:</p> <div class="fake-img l-page"> <p>.l-page</p> </div> <p>All of these have an outset variant if you want to poke out from the body text a little bit. For instance:</p> <div class="fake-img l-body-outset"> <p>.l-body-outset</p> </div> <div class="fake-img l-page-outset"> <p>.l-page-outset</p> </div> <p>Occasionally you’ll want to use the full browser width. For this, use <code class="language-plaintext highlighter-rouge">.l-screen</code>. You can also inset the element a little from the edge of the browser by using the inset variant.</p> <div class="fake-img l-screen"> <p>.l-screen</p> </div> <div class="fake-img l-screen-inset"> <p>.l-screen-inset</p> </div> <p>The final layout is for marginalia, asides, and footnotes. It does not interrupt the normal flow of <code class="language-plaintext highlighter-rouge">.l-body</code> sized text except on mobile screen sizes.</p> <div class="fake-img l-gutter"> <p>.l-gutter</p> </div> <hr/> <h2 id="other-typography">Other Typography?</h2> <p>Emphasis, aka italics, with <em>asterisks</em> (<code class="language-plaintext highlighter-rouge">*asterisks*</code>) or <em>underscores</em> (<code class="language-plaintext highlighter-rouge">_underscores_</code>).</p> <p>Strong emphasis, aka bold, with <strong>asterisks</strong> or <strong>underscores</strong>.</p> <p>Combined emphasis with <strong>asterisks and <em>underscores</em></strong>.</p> <p>Strikethrough uses two tildes. <del>Scratch this.</del></p> <ol> <li>First ordered list item</li> <li>Another item ⋅⋅* Unordered sub-list.</li> <li>Actual numbers don’t matter, just that it’s a number ⋅⋅1. Ordered sub-list</li> <li>And another item.</li> </ol> <p>⋅⋅⋅You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we’ll use three here to also align the raw Markdown).</p> <p>⋅⋅⋅To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅ ⋅⋅⋅Note that this line is separate, but within the same paragraph.⋅⋅ ⋅⋅⋅(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)</p> <ul> <li>Unordered list can use asterisks</li> <li>Or minuses</li> <li>Or pluses</li> </ul> <p><a href="https://www.google.com">I’m an inline-style link</a></p> <p><a href="https://www.google.com" title="Google's Homepage">I’m an inline-style link with title</a></p> <p><a href="https://www.mozilla.org">I’m a reference-style link</a></p> <p><a href="../blob/master/LICENSE">I’m a relative reference to a repository file</a></p> <p><a href="http://slashdot.org">You can use numbers for reference-style link definitions</a></p> <p>Or leave it empty and use the <a href="http://www.reddit.com">link text itself</a>.</p> <p>URLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or <a href="http://www.example.com">http://www.example.com</a> and sometimes example.com (but not on Github, for example).</p> <p>Some text to show that the reference links can follow later.</p> <p>Here’s our logo (hover to see the title text):</p> <p>Inline-style: <img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="Logo Title Text 1"/></p> <p>Reference-style: <img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="Logo Title Text 2"/></p> <p>Inline <code class="language-plaintext highlighter-rouge">code</code> has <code class="language-plaintext highlighter-rouge">back-ticks around</code> it.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">JavaScript syntax highlighting</span><span class="dl">"</span><span class="p">;</span>
<span class="nf">alert</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s</span> <span class="o">=</span> <span class="s">"Python syntax highlighting"</span>
<span class="k">print</span> <span class="n">s</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>No language indicated, so no syntax highlighting. 
But let's throw in a &lt;b&gt;tag&lt;/b&gt;.
</code></pre></div></div> <p>Colons can be used to align columns.</p> <table> <thead> <tr> <th>Tables</th> <th style="text-align: center">Are</th> <th style="text-align: right">Cool</th> </tr> </thead> <tbody> <tr> <td>col 3 is</td> <td style="text-align: center">right-aligned</td> <td style="text-align: right">$1600</td> </tr> <tr> <td>col 2 is</td> <td style="text-align: center">centered</td> <td style="text-align: right">$12</td> </tr> <tr> <td>zebra stripes</td> <td style="text-align: center">are neat</td> <td style="text-align: right">$1</td> </tr> </tbody> </table> <p>There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don’t need to make the raw Markdown line up prettily. You can also use inline Markdown.</p> <table> <thead> <tr> <th>Markdown</th> <th>Less</th> <th>Pretty</th> </tr> </thead> <tbody> <tr> <td><em>Still</em></td> <td><code class="language-plaintext highlighter-rouge">renders</code></td> <td><strong>nicely</strong></td> </tr> <tr> <td>1</td> <td>2</td> <td>3</td> </tr> </tbody> </table> <blockquote> <p>Blockquotes are very handy in email to emulate reply text. This line is part of the same quote.</p> </blockquote> <p>Quote break.</p> <blockquote> <p>This is a very long line that will still be quoted properly when it wraps. Oh boy let’s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can <em>put</em> <strong>Markdown</strong> into a blockquote.</p> </blockquote> <p>Here’s a line for us to start with.</p> <p>This line is separated from the one above by two newlines, so it will be a <em>separate paragraph</em>.</p> <p>This line is also a separate paragraph, but… This line is only separated by a single newline, so it’s a separate line in the <em>same paragraph</em>.</p>]]></content><author><name>Albert Einstein</name></author><summary type="html"><![CDATA[Your blog post's abstract. This is an example of a distill-style blog post and the main elements it supports.]]></summary></entry><entry><title type="html">Thinking Like Transformers</title><link href="https://iclr-blogposts.github.io/staging/blog/2022/raspy/" rel="alternate" type="text/html" title="Thinking Like Transformers"/><published>2022-12-01T00:00:00+00:00</published><updated>2022-12-01T00:00:00+00:00</updated><id>https://iclr-blogposts.github.io/staging/blog/2022/raspy</id><content type="html" xml:base="https://iclr-blogposts.github.io/staging/blog/2022/raspy/"><![CDATA[<h1 id="thinking-like-transformers">Thinking Like Transformers</h1> <ul> <li><a href="https://arxiv.org/pdf/2106.06981.pdf">Paper</a><d-cite key="weiss2021thinking"></d-cite> by Gail Weiss, Yoav Goldberg, Eran Yahav</li> </ul> <p>Transformer models are foundational to AI systems. There are now countless explanations of “how transformers work?” in the sense of the architecture diagram at the heart of transformers.</p> <p><img src="/staging/assets/img/2022-12-01-raspy/Blog_5_0.svg" alt="svg"/></p> <p>However this diagram does not provide any intuition into the computational model of this framework. As researchers become interested in how Transformers work, gaining intuition into their mechanisms becomes increasingly useful.</p> <p><a href="https://arxiv.org/pdf/2106.06981.pdf">Thinking like Transformers</a> proposes a computational framework for Transformer-like calculations. The framework uses discrete computation to simulate Transformer computations. The resulting language <a href="https://github.com/tech-srl/RASP">RASP</a> is a programming language where, ideally, every program can compile down to a specific Transformer (indeed, David Lindner and colleagues have recently released a <a href="https://arxiv.org/abs/2301.05062">compiler</a> for a large subset of RASP!).</p> <p>In this blog post, I reimplemented a variant of RASP in Python (RASPy). The language is roughly compatible with the original version, but with some syntactic changes that I thought were fun. With this language, we have a challenging set of puzzles to walk through and understand how it works.</p> <p>Before jumping into the language itself, let’s look at an example of what coding with Transformers looks like. Here is some code that computes the <code class="language-plaintext highlighter-rouge">flip</code>, i.e. reversing an input sequence. The code itself uses two Transformer layers to apply attention and mathematical computations to achieve the result.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">flip</span><span class="p">():</span>
    <span class="n">length</span> <span class="o">=</span> <span class="p">(</span><span class="nf">key</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="nf">query</span><span class="p">(</span><span class="mi">1</span><span class="p">)).</span><span class="nf">value</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">flip</span> <span class="o">=</span> <span class="p">(</span><span class="nf">key</span><span class="p">(</span><span class="n">length</span> <span class="o">-</span> <span class="n">indices</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="nf">query</span><span class="p">(</span><span class="n">indices</span><span class="p">)).</span><span class="nf">value</span><span class="p">(</span><span class="n">tokens</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">flip</span>
<span class="nf">flip</span><span class="p">()</span>
</code></pre></div></div> <p><img src="/staging/assets/img/2022-12-01-raspy/Blog_11_0.svg" alt="svg"/></p> <h2 id="transformers-as-code">Transformers as Code</h2> <p>Our goal is to define a computational formalism that mimics the expressivity of Transformers. We will go through this process by analogy, describing each language construct next to the aspect of the Transformer it represents. (See the full <a href="https://arxiv.org/pdf/2106.06981.pdf">paper</a> for the formal language specification).</p> <p>The core unit of the language is a <em>sequence operation</em> that transforms a sequence to another sequence of the same length. I will refer to these throughout as <em>transforms</em>.</p> <h3 id="inputs">Inputs</h3> <p>In a Transformer, the base layer is the input fed to the model. This input usually contains the raw tokens as well as positional information.</p> <p><img src="/staging/assets/img/2022-12-01-raspy/Blog_15_0.svg" alt="svg"/></p> <p>In code, the symbol <code class="language-plaintext highlighter-rouge">tokens</code> represents the simplest transform. It returns the tokens passed to the model. The default input is the sequence “hello”.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tokens</span>
</code></pre></div></div> <p><img src="/staging/assets/img/2022-12-01-raspy/Blog_17_0.svg" alt="svg"/></p> <p>If we want to change the input to the transform, we use the input method to pass in an alternative.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tokens</span><span class="p">.</span><span class="nf">input</span><span class="p">([</span><span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">])</span>
</code></pre></div></div> <p><img src="/staging/assets/img/2022-12-01-raspy/Blog_19_0.svg" alt="svg"/></p> <p>As with Transformers, we cannot access the positions of these sequences directly. However, to mimic position embeddings, we have access to a sequence of indices.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">indices</span>
</code></pre></div></div> <p><img src="/staging/assets/img/2022-12-01-raspy/Blog_21_0.svg" alt="svg"/></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sop</span> <span class="o">=</span> <span class="n">indices</span>
<span class="n">sop</span><span class="p">.</span><span class="nf">input</span><span class="p">(</span><span class="s">"goodbye"</span><span class="p">)</span>
</code></pre></div></div> <p><img src="/staging/assets/img/2022-12-01-raspy/Blog_22_0.svg" alt="svg"/></p> <h3 id="feed-forward-network">Feed Forward Network</h3> <p>After the input layer, we reach the feed-forward network. In a Transformer, this stage can apply mathematical operations to each element of the sequence independently.</p> <p><img src="/staging/assets/img/2022-12-01-raspy/Blog_24_0.svg" alt="svg"/></p> <p>In code, we represent this stage by computation on transforms. Mathematical operations are overloaded to represent independent computation on each element of the sequence .</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tokens</span> <span class="o">==</span> <span class="s">"l"</span>
</code></pre></div></div> <p><img src="/staging/assets/img/2022-12-01-raspy/Blog_26_0.svg" alt="svg"/></p> <p>The result is a new transform. Once constructed it can be applied to new input.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">model</span> <span class="o">=</span> <span class="n">tokens</span> <span class="o">*</span> <span class="mi">2</span>  <span class="o">-</span> <span class="mi">1</span>
<span class="n">model</span><span class="p">.</span><span class="nf">input</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">])</span>
</code></pre></div></div> <p><img src="/staging/assets/img/2022-12-01-raspy/Blog_28_0.svg" alt="svg"/></p> <p>Operations can combine multiple transforms. For example, functions of <code class="language-plaintext highlighter-rouge">tokens</code> and <code class="language-plaintext highlighter-rouge">indices</code>. The analogy here is that the Transformer activations can keep track of multiple pieces of information simultaneously.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">model</span> <span class="o">=</span> <span class="n">tokens</span> <span class="o">-</span> <span class="mi">5</span> <span class="o">+</span> <span class="n">indices</span>
<span class="n">model</span><span class="p">.</span><span class="nf">input</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">])</span>
</code></pre></div></div> <p><img src="/staging/assets/img/2022-12-01-raspy/Blog_30_0.svg" alt="svg"/></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="n">tokens</span> <span class="o">==</span> <span class="s">"l"</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">indices</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div></div> <p><img src="/staging/assets/img/2022-12-01-raspy/Blog_31_0.svg" alt="svg"/></p> <p>We provide a few helper functions to make it easier to write transforms. For example, <code class="language-plaintext highlighter-rouge">where</code> provides an “if” statement like construct</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">where</span><span class="p">((</span><span class="n">tokens</span> <span class="o">==</span> <span class="s">"h"</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">tokens</span> <span class="o">==</span> <span class="s">"l"</span><span class="p">),</span> <span class="n">tokens</span><span class="p">,</span> <span class="s">"q"</span><span class="p">)</span>
</code></pre></div></div> <p><img src="/staging/assets/img/2022-12-01-raspy/Blog_33_0.svg" alt="svg"/></p> <p>And <code class="language-plaintext highlighter-rouge">map</code> lets us define our own operators, for instance a string to int transform. (Users should be careful to only use operations here that could be computed with a simple neural network).</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">atoi</span> <span class="o">=</span> <span class="n">tokens</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="nf">ord</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">-</span> <span class="nf">ord</span><span class="p">(</span><span class="s">'0'</span><span class="p">))</span>
<span class="n">atoi</span><span class="p">.</span><span class="nf">input</span><span class="p">(</span><span class="s">"31234"</span><span class="p">)</span>
</code></pre></div></div> <p><img src="/staging/assets/img/2022-12-01-raspy/Blog_35_0.svg" alt="svg"/></p> <p>When chaining these transforms, it is often easier to work with functions. For example the following applies where and then <code>atoi</code> and then adds 2.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">atoi</span><span class="p">(</span><span class="n">seq</span><span class="o">=</span><span class="n">tokens</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">seq</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="nf">ord</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">-</span> <span class="nf">ord</span><span class="p">(</span><span class="s">'0'</span><span class="p">))</span> 

<span class="n">op</span> <span class="o">=</span> <span class="p">(</span><span class="nf">atoi</span><span class="p">(</span><span class="nf">where</span><span class="p">(</span><span class="n">tokens</span> <span class="o">==</span> <span class="s">"-"</span><span class="p">,</span> <span class="s">"0"</span><span class="p">,</span> <span class="n">tokens</span><span class="p">))</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span>
<span class="n">op</span><span class="p">.</span><span class="nf">input</span><span class="p">(</span><span class="s">"02-13"</span><span class="p">)</span>
</code></pre></div></div> <p><img src="/staging/assets/img/2022-12-01-raspy/Blog_37_0.svg" alt="svg"/></p> <p>From here on, unless we use a different input sequence, we will assume that the input is ‘hello’ and omit the input display in the illustrations.</p> <h3 id="attention-selectors">Attention Selectors</h3> <p>Things get more interesting when we start to apply attention. This allows routing of information between the different elements of the sequence.</p> <p><img src="/staging/assets/img/2022-12-01-raspy/Blog_39_0.svg" alt="svg"/></p> <p>We begin by defining notation for the keys and queries of the model. Keys and queries are effectively transforms that we will broadcast and compare to each other to create <em>selectors</em>, our parallel to attention patterns. We create them directly from transforms. For example, if we want to define a key, we call <code class="language-plaintext highlighter-rouge">key</code> on a transform.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">key</span><span class="p">(</span><span class="n">tokens</span><span class="p">)</span>
</code></pre></div></div> <p><img src="/staging/assets/img/2022-12-01-raspy/Blog_41_0.svg" alt="svg"/></p> <p>Similarly for <code class="language-plaintext highlighter-rouge">query</code>. (Queries are presented as columns to reflect their relation to the selectors we will create from them.)</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">query</span><span class="p">(</span><span class="n">tokens</span><span class="p">)</span>
</code></pre></div></div> <p><img src="/staging/assets/img/2022-12-01-raspy/Blog_43_0.svg" alt="svg"/></p> <p>Scalars can be used as keys or queries. They broadcast out to the length of the underlying sequence.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">query</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div> <p><img src="/staging/assets/img/2022-12-01-raspy/Blog_45_0.svg" alt="svg"/></p> <p>By applying a comparison operation between a key and a query we create a <em>selector</em>, our parallel to an attention matrix - though this one is unweighted.</p> <p>A selector is a binary matrix indicating which input position (column) each output position (row) will attend to in an eventual attention computation. In the comparison creating it, the key values describe the input (column) positions, and the query values describe the output (row) positions.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">eq</span> <span class="o">=</span> <span class="p">(</span><span class="nf">key</span><span class="p">(</span><span class="n">tokens</span><span class="p">)</span> <span class="o">==</span> <span class="nf">query</span><span class="p">(</span><span class="n">tokens</span><span class="p">))</span>
<span class="n">eq</span>
</code></pre></div></div> <p><img src="/staging/assets/img/2022-12-01-raspy/Blog_47_0.svg" alt="svg"/></p> <p>Some examples:</p> <ul> <li>A selector that matches each output position to the previous input position.</li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">offset</span> <span class="o">=</span> <span class="p">(</span><span class="nf">key</span><span class="p">(</span><span class="n">indices</span><span class="p">)</span> <span class="o">==</span> <span class="nf">query</span><span class="p">(</span><span class="n">indices</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span>
<span class="n">offset</span>
</code></pre></div></div> <p><img src="/staging/assets/img/2022-12-01-raspy/Blog_49_0.svg" alt="svg"/></p> <ul> <li>A selector that matches each output position to all earlier input positions.</li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">before</span> <span class="o">=</span> <span class="nf">key</span><span class="p">(</span><span class="n">indices</span><span class="p">)</span> <span class="o">&lt;</span> <span class="nf">query</span><span class="p">(</span><span class="n">indices</span><span class="p">)</span>
<span class="n">before</span>
</code></pre></div></div> <p><img src="/staging/assets/img/2022-12-01-raspy/Blog_51_0.svg" alt="svg"/></p> <ul> <li>A selector that matches each output position to all later input positions.</li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">after</span> <span class="o">=</span> <span class="nf">key</span><span class="p">(</span><span class="n">indices</span><span class="p">)</span> <span class="o">&gt;</span> <span class="nf">query</span><span class="p">(</span><span class="n">indices</span><span class="p">)</span>
<span class="n">after</span>
</code></pre></div></div> <p><img src="/staging/assets/img/2022-12-01-raspy/Blog_53_0.svg" alt="svg"/></p> <p>Selectors can be merged using boolean operations. For example, this selector focuses each output position on 1) earlier positions that 2) contain the same original input token as its own. We show this by including both pairs of keys and queries in the matrix.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">before</span> <span class="o">&amp;</span> <span class="n">eq</span>
</code></pre></div></div> <p><img src="/staging/assets/img/2022-12-01-raspy/Blog_55_0.svg" alt="svg"/></p> <h3 id="using-attention">Using Attention</h3> <p>Given an attention selector we can provide a value sequence to aggregate. We represent aggregation by <strong>summing</strong> up over the values that have a true value for their selector.</p> <p>(Note: in the original paper, they use a <strong>mean</strong> aggregation and show a clever construction where mean aggregation is able to represent a sum calculation. RASPy uses sum by default for simplicity and to avoid fractions. In practicce this means that RASPy may underestimate the number of layers needed to convert to a mean based model by a factor of 2.)</p> <p>Attention aggregation gives us the ability to compute functions like histograms.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nf">key</span><span class="p">(</span><span class="n">tokens</span><span class="p">)</span> <span class="o">==</span> <span class="nf">query</span><span class="p">(</span><span class="n">tokens</span><span class="p">)).</span><span class="nf">value</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div> <p><img src="/staging/assets/img/2022-12-01-raspy/Blog_59_0.svg" alt="svg"/></p> <p>Visually we follow the architecture diagram. Queries are to the left, Keys at the top, Values at the bottom, and the Output is to the right.</p> <p><img src="/staging/assets/img/2022-12-01-raspy/Blog_61_0.svg" alt="svg"/></p> <p>Some attention operations may not even use the input tokens. For instance to compute the <code class="language-plaintext highlighter-rouge">length</code> of a sequence, we create a “select all” attention selector and then add 1 from each position.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">length</span> <span class="o">=</span> <span class="p">(</span><span class="nf">key</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="nf">query</span><span class="p">(</span><span class="mi">1</span><span class="p">)).</span><span class="nf">value</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="n">length</span> <span class="o">=</span> <span class="n">length</span><span class="p">.</span><span class="nf">name</span><span class="p">(</span><span class="s">"length"</span><span class="p">)</span>
<span class="n">length</span>
</code></pre></div></div> <p><img src="/staging/assets/img/2022-12-01-raspy/Blog_63_0.svg" alt="svg"/></p> <p>Here’s a more complex example, shown step-by-step. (This is the kind of thing they ask in interviews!)</p> <p>Say we want to compute the sum of neighboring values in a sequence, along a sliding window. First we apply the forward cutoff, attending only to positions that are not too far in the past.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">WINDOW</span><span class="o">=</span><span class="mi">3</span>
<span class="n">s1</span> <span class="o">=</span> <span class="p">(</span><span class="nf">key</span><span class="p">(</span><span class="n">indices</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="nf">query</span><span class="p">(</span><span class="n">indices</span> <span class="o">-</span> <span class="n">WINDOW</span> <span class="o">+</span> <span class="mi">1</span><span class="p">))</span>  
<span class="n">s1</span>
</code></pre></div></div> <p><img src="/staging/assets/img/2022-12-01-raspy/Blog_65_0.svg" alt="svg"/></p> <p>Then the backward cutoff, attending only to positions up to and including our own.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s2</span> <span class="o">=</span> <span class="p">(</span><span class="nf">key</span><span class="p">(</span><span class="n">indices</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="nf">query</span><span class="p">(</span><span class="n">indices</span><span class="p">))</span>
<span class="n">s2</span>
</code></pre></div></div> <p><img src="/staging/assets/img/2022-12-01-raspy/Blog_67_0.svg" alt="svg"/></p> <p>Intersect.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sel</span> <span class="o">=</span> <span class="n">s1</span> <span class="o">&amp;</span> <span class="n">s2</span>
<span class="n">sel</span>
</code></pre></div></div> <p><img src="/staging/assets/img/2022-12-01-raspy/Blog_69_0.svg" alt="svg"/></p> <p>And finally aggregate.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sum2</span> <span class="o">=</span> <span class="n">sel</span><span class="p">.</span><span class="nf">value</span><span class="p">(</span><span class="n">tokens</span><span class="p">)</span> 
<span class="n">sum2</span><span class="p">.</span><span class="nf">input</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">])</span>
</code></pre></div></div> <p><img src="/staging/assets/img/2022-12-01-raspy/Blog_71_0.svg" alt="svg"/></p> <p>Here is a simple example that produces a 2-layer transform. The first corresponds to computing length and the second the cumulative sum. The cumulative sum has to go into a second layer because it is applied to a transform which uses length, and so it can only be computed after the computation of length is complete.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">cumsum</span><span class="p">(</span><span class="n">seq</span><span class="o">=</span><span class="n">tokens</span><span class="p">):</span>
    <span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="n">before</span> <span class="o">|</span> <span class="p">(</span><span class="nf">key</span><span class="p">(</span><span class="n">indices</span><span class="p">)</span> <span class="o">==</span> <span class="nf">query</span><span class="p">(</span><span class="n">indices</span><span class="p">))).</span><span class="nf">value</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">x</span><span class="p">.</span><span class="nf">name</span><span class="p">(</span><span class="s">"cumsum"</span><span class="p">)</span>
<span class="nf">cumsum</span><span class="p">().</span><span class="nf">input</span><span class="p">([</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">])</span>
</code></pre></div></div> <p><img src="/staging/assets/img/2022-12-01-raspy/Blog_73_0.svg" alt="svg"/></p> <h3 id="layers">Layers</h3> <p>The language supports building up more complex transforms. It keeps track of the <em>layers</em> by tracking the operations computed so far.</p> <p><img src="/staging/assets/img/2022-12-01-raspy/Blog_76_0.svg" alt="svg"/></p> <p>Here is a simple example that produces a 2-layer transform. The first corresponds to computing length and the second the cumulative sum.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span> <span class="o">=</span> <span class="nf">cumsum</span><span class="p">(</span><span class="n">length</span> <span class="o">-</span> <span class="n">indices</span><span class="p">)</span>
<span class="n">x</span><span class="p">.</span><span class="nf">input</span><span class="p">([</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">])</span>
</code></pre></div></div> <p><img src="/staging/assets/img/2022-12-01-raspy/Blog_78_0.svg" alt="svg"/></p> <h2 id="coding-with-transformers">Coding with Transformers</h2> <p>Given this library of functions, we can write operations to accomplish surprisingly complex tasks.</p> <p><strong>Can we produce a Transformer that does basic addition of two arbitrary length numbers?</strong></p> <p>i.e. given a string “19492+23919” can we produce the correct output?</p> <p>We will go through these steps, and their solutions, here. If you would rather do them on your own, we provide a version where you can try them yourself!</p> <p>Before we dive in to the main task, we will do some challenges of increasing difficulty to help us build some intuitions.</p> <h3 id="challenge-1-select-a-given-index">Challenge 1: Select a given index</h3> <p>Produce a sequence where all the elements have the value at index i.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">index</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">seq</span><span class="o">=</span><span class="n">tokens</span><span class="p">):</span>
    <span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="nf">key</span><span class="p">(</span><span class="n">indices</span><span class="p">)</span> <span class="o">==</span> <span class="nf">query</span><span class="p">(</span><span class="n">i</span><span class="p">)).</span><span class="nf">value</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">x</span><span class="p">.</span><span class="nf">name</span><span class="p">(</span><span class="s">"index"</span><span class="p">)</span>
<span class="nf">index</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div> <p><img src="/staging/assets/img/2022-12-01-raspy/Blog_83_0.svg" alt="svg"/></p> <h3 id="challenge-2-shift">Challenge 2: Shift</h3> <p>Shift all of the tokens in a sequence to the right by i positions. (Here we introduce an optional parameter in the aggregation: the default value to be used when no input positions are selected. If not defined, this value is 0.)</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">shift</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s">"_"</span><span class="p">,</span> <span class="n">seq</span><span class="o">=</span><span class="n">tokens</span><span class="p">):</span>
    <span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="nf">key</span><span class="p">(</span><span class="n">indices</span><span class="p">)</span> <span class="o">==</span> <span class="nf">query</span><span class="p">(</span><span class="n">indices</span><span class="o">-</span><span class="n">i</span><span class="p">)).</span><span class="nf">value</span><span class="p">(</span><span class="n">seq</span><span class="p">,</span> <span class="n">default</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">x</span><span class="p">.</span><span class="nf">name</span><span class="p">(</span><span class="s">"shift"</span><span class="p">)</span>
<span class="nf">shift</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</code></pre></div></div> <p><img src="/staging/assets/img/2022-12-01-raspy/Blog_85_0.svg" alt="svg"/></p> <h3 id="challenge-3-minimum">Challenge 3: Minimum</h3> <p>Compute the minimum values of the sequence. (This one starts to get harder. Our version uses 2 layers of attention.)</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">minimum</span><span class="p">(</span><span class="n">seq</span><span class="o">=</span><span class="n">tokens</span><span class="p">):</span>
    <span class="n">sel1</span> <span class="o">=</span> <span class="n">before</span> <span class="o">&amp;</span> <span class="p">(</span><span class="nf">key</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span> <span class="o">==</span> <span class="nf">query</span><span class="p">(</span><span class="n">seq</span><span class="p">))</span>
    <span class="n">sel2</span> <span class="o">=</span> <span class="nf">key</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span> <span class="o">&lt;</span> <span class="nf">query</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span>
    <span class="n">less</span> <span class="o">=</span> <span class="p">(</span><span class="n">sel1</span> <span class="o">|</span> <span class="n">sel2</span><span class="p">).</span><span class="nf">value</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="nf">key</span><span class="p">(</span><span class="n">less</span><span class="p">)</span> <span class="o">==</span> <span class="nf">query</span><span class="p">(</span><span class="mi">0</span><span class="p">)).</span><span class="nf">value</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">x</span><span class="p">.</span><span class="nf">name</span><span class="p">(</span><span class="s">"min"</span><span class="p">)</span>
<span class="nf">minimum</span><span class="p">()([</span><span class="mi">5</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">2</span><span class="p">])</span>
</code></pre></div></div> <p><img src="/staging/assets/img/2022-12-01-raspy/Blog_87_0.svg" alt="svg"/></p> <p>The idea behind our solution is an implicit full ordering of the input positions: we (implicitly) order the positions according to input token value, with input position as tie breaker. Our first act is to have each position attend to all positions before it in the ordering: <code class="language-plaintext highlighter-rouge">sel1</code> focuses on earlier input positions with the same input token value, and <code class="language-plaintext highlighter-rouge">sel2</code> focuses on input positions with lower input token value. We then aggregate a 1 from all positions to get where each position is located in this ordering (i.e., how many other positions precede it). The minimum value is the input value at the first position according to this ordering (i.e., the one which had no other positions precede it).</p> <h3 id="challenge-4-first-index">Challenge 4: First Index</h3> <p>Compute the first index that has token q, assuming the sequence always has length shorter than 100. (2 layers)</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">first</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="n">seq</span><span class="o">=</span><span class="n">tokens</span><span class="p">):</span>
    <span class="k">return</span> <span class="nf">minimum</span><span class="p">(</span><span class="nf">where</span><span class="p">(</span><span class="n">seq</span> <span class="o">==</span> <span class="n">q</span><span class="p">,</span> <span class="n">indices</span><span class="p">,</span> <span class="mi">99</span><span class="p">))</span>
<span class="nf">first</span><span class="p">(</span><span class="s">"l"</span><span class="p">)</span>
</code></pre></div></div> <p><img src="/staging/assets/img/2022-12-01-raspy/Blog_90_0.svg" alt="svg"/></p> <h3 id="challenge-5-right-align">Challenge 5: Right Align</h3> <p>Right align a padded sequence e.g. ralign().inputs(‘xyz___’) = ‘—xyz’” (2 layers)</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">ralign</span><span class="p">(</span><span class="n">default</span><span class="o">=</span><span class="s">"-"</span><span class="p">,</span> <span class="n">sop</span><span class="o">=</span><span class="n">tokens</span><span class="p">):</span>
    <span class="n">c</span> <span class="o">=</span> <span class="p">(</span><span class="nf">key</span><span class="p">(</span><span class="n">sop</span><span class="p">)</span> <span class="o">==</span> <span class="nf">query</span><span class="p">(</span><span class="s">"_"</span><span class="p">)).</span><span class="nf">value</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="nf">key</span><span class="p">(</span><span class="n">indices</span> <span class="o">+</span> <span class="n">c</span><span class="p">)</span> <span class="o">==</span> <span class="nf">query</span><span class="p">(</span><span class="n">indices</span><span class="p">)).</span><span class="nf">value</span><span class="p">(</span><span class="n">sop</span><span class="p">,</span> <span class="n">default</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">x</span><span class="p">.</span><span class="nf">name</span><span class="p">(</span><span class="s">"ralign"</span><span class="p">)</span>
<span class="nf">ralign</span><span class="p">()(</span><span class="s">"xyz__"</span><span class="p">)</span>
</code></pre></div></div> <p><img src="/staging/assets/img/2022-12-01-raspy/Blog_92_0.svg" alt="svg"/></p> <h3 id="challenge-6-split">Challenge 6: Split</h3> <p>Split a sequence into two parts at value v and then right align. You can assume there is exactly one appearance of v in the sequence. (3 layers to get and align the first part of the sequence, but only 1 for the second.)</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">split</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">get_first_part</span><span class="p">,</span> <span class="n">sop</span><span class="o">=</span><span class="n">tokens</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s">"0"</span><span class="p">):</span>
    <span class="n">split_point</span> <span class="o">=</span> <span class="p">(</span><span class="nf">key</span><span class="p">(</span><span class="n">sop</span><span class="p">)</span> <span class="o">==</span> <span class="nf">query</span><span class="p">(</span><span class="n">v</span><span class="p">)).</span><span class="nf">value</span><span class="p">(</span><span class="n">indices</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">get_first_part</span><span class="p">:</span>
        <span class="n">x</span> <span class="o">=</span> <span class="nf">ralign</span><span class="p">(</span><span class="n">default</span><span class="p">,</span> 
                   <span class="nf">where</span><span class="p">(</span><span class="n">indices</span> <span class="o">&lt;</span> <span class="n">split_point</span><span class="p">,</span> 
                         <span class="n">sop</span><span class="p">,</span> <span class="s">"_"</span><span class="p">))</span>
        <span class="k">return</span> <span class="n">x</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">x</span> <span class="o">=</span> <span class="nf">where</span><span class="p">(</span><span class="n">indices</span> <span class="o">&gt;</span> <span class="n">split_point</span><span class="p">,</span> <span class="n">sop</span><span class="p">,</span> <span class="n">default</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">x</span>
<span class="nf">split</span><span class="p">(</span><span class="s">"+"</span><span class="p">,</span> <span class="bp">False</span><span class="p">)(</span><span class="s">"xyz+zyr"</span><span class="p">)</span>
</code></pre></div></div> <p><img src="/staging/assets/img/2022-12-01-raspy/Blog_94_0.svg" alt="svg"/></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">split</span><span class="p">(</span><span class="s">"+"</span><span class="p">,</span> <span class="mi">0</span><span class="p">)(</span><span class="s">"xyz+zyr"</span><span class="p">)</span>
</code></pre></div></div> <p><img src="/staging/assets/img/2022-12-01-raspy/Blog_95_0.svg" alt="svg"/></p> <h3 id="challenge-6-slide">Challenge 6: Slide</h3> <p>Replace special tokens “&lt;” with the closest non “&lt;” value to their right. (2 layers)</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">slide</span><span class="p">(</span><span class="n">match</span><span class="p">,</span> <span class="n">seq</span><span class="o">=</span><span class="n">tokens</span><span class="p">):</span>
    <span class="n">x</span> <span class="o">=</span> <span class="nf">cumsum</span><span class="p">(</span><span class="n">match</span><span class="p">)</span> 
    <span class="n">y</span> <span class="o">=</span> <span class="p">((</span><span class="nf">key</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">==</span> <span class="nf">query</span><span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">))</span> <span class="o">&amp;</span> <span class="p">(</span><span class="nf">key</span><span class="p">(</span><span class="n">match</span><span class="p">)</span> <span class="o">==</span> <span class="nf">query</span><span class="p">(</span><span class="bp">True</span><span class="p">))).</span><span class="nf">value</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span>
    <span class="n">seq</span> <span class="o">=</span>  <span class="nf">where</span><span class="p">(</span><span class="n">match</span><span class="p">,</span> <span class="n">seq</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">seq</span><span class="p">.</span><span class="nf">name</span><span class="p">(</span><span class="s">"slide"</span><span class="p">)</span>
<span class="nf">slide</span><span class="p">(</span><span class="n">tokens</span> <span class="o">!=</span> <span class="s">"&lt;"</span><span class="p">).</span><span class="nf">input</span><span class="p">(</span><span class="s">"xxxh&lt;&lt;&lt;l"</span><span class="p">)</span>
</code></pre></div></div> <p><img src="/staging/assets/img/2022-12-01-raspy/Blog_97_0.svg" alt="svg"/></p> <h3 id="challenge-7-add">Challenge 7: Add</h3> <p>For this one you want to perform addition of two numbers. Here are the steps.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">add</span><span class="p">().</span><span class="nf">input</span><span class="p">(</span><span class="s">"683+345"</span><span class="p">)</span>
</code></pre></div></div> <ol> <li>Split into parts (challenge 6). Convert to ints. Add.</li> </ol> <blockquote> <p>“683+345” =&gt; [0, 0, 0, 9, 12, 8]</p> </blockquote> <ol> <li>Compute the carry terms. Three possibilities: definitely receives carry (“1”), definitely doesn’t receive carry (“0”), maybe receives carry (“&lt;”).Because we are only adding two numbers, the only case in which a position might receive a carry is if the position after it sums to 9. In that case, it will receive a carry if and only if the position after <em>that</em> receives a carry.</li> </ol> <blockquote> <p>[0, 0, 0, 9, 12, 8] =&gt; “00&lt;100”</p> </blockquote> <ol> <li>Slide the carry coefficients. A position that might receive a carry will get one if and only if the next position receives a carry - and so on down the chain until the next definite carry/no carry.</li> </ol> <blockquote> <p>“00&lt;100” =&gt; 001100”</p> </blockquote> <ol> <li>Complete the addition.</li> </ol> <p>Each of these is 1 line of code. The full system is 6 layers. (if you are careful you can do it in 5!).</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">sop</span><span class="o">=</span><span class="n">tokens</span><span class="p">):</span>
    <span class="c1"># 0) Parse and add
</span>    <span class="n">x</span> <span class="o">=</span> <span class="nf">atoi</span><span class="p">(</span><span class="nf">split</span><span class="p">(</span><span class="s">"+"</span><span class="p">,</span> <span class="bp">True</span><span class="p">,</span> <span class="n">sop</span><span class="p">))</span> \
        <span class="o">+</span> <span class="nf">atoi</span><span class="p">(</span><span class="nf">split</span><span class="p">(</span><span class="s">"+"</span><span class="p">,</span> <span class="bp">False</span><span class="p">,</span> <span class="n">sop</span><span class="p">))</span>
    <span class="c1"># 1) Check for carries 
</span>    <span class="n">gets_carry</span> <span class="o">=</span> <span class="nf">shift</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="s">"0"</span><span class="p">,</span> <span class="nf">where</span><span class="p">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="mi">9</span><span class="p">,</span> <span class="s">"1"</span><span class="p">,</span> <span class="nf">where</span><span class="p">(</span><span class="n">x</span> <span class="o">==</span> <span class="mi">9</span><span class="p">,</span> <span class="s">"&lt;"</span><span class="p">,</span> <span class="s">"0"</span><span class="p">)))</span>
    <span class="c1"># 2) Slide carries to their columns - all in one parallel go!                                         
</span>    <span class="n">gets_carry</span> <span class="o">=</span> <span class="nf">atoi</span><span class="p">(</span><span class="nf">slide</span><span class="p">(</span><span class="n">gets_carry</span> <span class="o">!=</span> <span class="s">"&lt;"</span><span class="p">,</span> <span class="n">gets_carry</span><span class="p">))</span>
    <span class="c1"># 3) Add in carries, and remove overflow from original addition.                                                                                  
</span>    <span class="nf">return </span><span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="n">gets_carry</span><span class="p">)</span> <span class="o">%</span> <span class="mi">10</span>
<span class="nf">add</span><span class="p">()(</span><span class="s">"683+345"</span><span class="p">)</span>
</code></pre></div></div> <p><img src="/staging/assets/img/2022-12-01-raspy/Blog_99_0.svg" alt="svg"/></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">683</span> <span class="o">+</span> <span class="mi">345</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1028
</code></pre></div></div> <p>Pretty neat stuff. If you are interested more in this topic, be sure to check at the paper:</p> <p><a href="https://arxiv.org/pdf/2106.06981.pdf">Thinking like Transformers</a> and the <a href="https://github.com/tech-srl/RASP">RASP language</a>.</p>]]></content><author><name>Alexander Rush</name></author><summary type="html"><![CDATA[Thinking like Transformers proposes a simple language for coding with attention-like primitives. Using this language, we consider a challenging set of puzzles to gain intuition for how Transformer could implement basic algorithms.]]></summary></entry></feed>